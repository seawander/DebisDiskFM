import copy                         # duplicate the parameter files
import subprocess                   # run the parameter files
import os                           # change directory
import numpy as np
import shutil


from . import mcfostParameterTemplate      # create a tempalte parameter file
from glob import glob

def run_hd191089(var_names = None, var_values = None, paraPath = None, calcSED = True, calcImage = True, hash_address = True, STIS = True, NICMOS = True, GPI = True, paramfiles_only = False, Fe_composition = False):
    """This code generates and saves the MCFOST disk(s) to `paraPath` with given input parameters. 
    The MCFOST parameters are modified from the template generated by mcfostParameterTemplate().
    
    There are 3 major sections:
    1. Fixed Parameters: parameters fixed specific for the HD 191089 disk system.
    2. Variables: parameters that vary, this section is used for MCMC modeling purposes.
    3. Parameter File for HD191089: since we have the observations for the HD 191089 system with 3 instruments (Hubble/STIS, Hubble/
       NICMOS, and Gemini/GPI, the parameter structure generated from the above two sections are duplicated to suite for these 3 instruments.
       The directly and indirectly modified parameters are: field of view, pixel size, whether to generate Stokes parameters, etc.
    
    The parameter files are then run to generate for the three instruments, and saved to hard drive.
    
    Inputs:
    1. The `var_names` are the variable parameters for Section 2, and they are MANUALLY mapped to the corresponding parameters in
    the template generated by mcfostParameterTemplate(). This step is performed to create a quick link to the template variables.
    2. The `var_values` contains the list corresponding values for `var_names`. The default value is in the folder where you run the code.
    3. `paraPath` contains the path where you'd like to save the parameter files. If `None`, it will be saved in currrent folder.
    4. `calcSED`: whether to calculate the spectral energy distribution (SED) for such system.
        Note: SED calculation takes the majority of time in this code. To save time (and if you do not focus on the SED of the system),
        you can turn this to `False` when calculating the images.
    5. `calcImage`: whether to calculate the images for such system.
        Note: before `calcImage`, you DO NOT have to set `calcSED = True`. The scattered light image can be directly generated using MCFOST.
    6. `hash_address`: whether to hash the path/address to enable parallel evaluation of different parameters by saving at different addresses.
    7. `STIS`: whether to generate the STIS image
    8. `NICMOS`: whether to generate the NICMOS image
    9. `GPI`: whether to generate the GPI image. The default values for 7, 8, and 9 are True.  You can turn individual ones on to focus on them only.
    10. `paramfiles_only`: whether to only generate the parameter files.
    11. `Fe_composition`: wheter to use Fe as a composition, if True, the compositions will be amorphous Silicates, amorphous Carbon, and Fe-Posch (default is False: Fe-Posch will be H2O Ice).
    """
    
    param_hd191089 = mcfostParameterTemplate.generateMcfostTemplate(1, [3], 1)

    resolution_stis = 0.05078
    resolution_gpi = 14.166e-3
    resolution_nicmos = 0.07565

    ###############################################################################################
    ################################# Section 1: Fixed Parameters #################################
    ################### parameters fixed specific for the HD 191089 disk system.###################
    ###############################################################################################

    dist = 50.14
    param_hd191089['#Grid geometry and size']['row1']['n_rad'] = 100
    param_hd191089['#Maps']['row3']['distance'] = dist


    param_hd191089['#Density structure']['zone0']['row1']['gas-to-dust mass ratio'] = 0
    param_hd191089['#Density structure']['zone0']['row2']['reference radius'] = 45.3
    param_hd191089['#Density structure']['zone0']['row2']['scale height'] = 1.812
    param_hd191089['#Density structure']['zone0']['row2']['vertical profile exponent'] = 2

    param_hd191089['#Grain properties']['zone0']['species0']['row0']['Grain type'] = 'DHS'
    param_hd191089['#Grain properties']['zone0']['species1']['row0']['Grain type'] = 'DHS'
    param_hd191089['#Grain properties']['zone0']['species2']['row0']['Grain type'] = 'DHS'

    param_hd191089['#Grain properties']['zone0']['species0']['row3']['amax'] = 1e3
    param_hd191089['#Grain properties']['zone0']['species1']['row3']['amax'] = 1e3
    param_hd191089['#Grain properties']['zone0']['species2']['row3']['amax'] = 1e3

    param_hd191089['#Grain properties']['zone0']['species0']['row1']['Optical indices file'] = 'dlsi_opct.dat'  #'MgSiO3.dat'
    param_hd191089['#Grain properties']['zone0']['species1']['row1']['Optical indices file'] = 'ac_opct.dat'    #'lgsi_opct.dat'
    if Fe_composition:
        param_hd191089['#Grain properties']['zone0']['species2']['row1']['Optical indices file'] = 'Fe-Posch.dat'
    else:
        param_hd191089['#Grain properties']['zone0']['species2']['row1']['Optical indices file'] = 'ice_opct.dat'   #'Fe-Posch.dat'

    param_hd191089['#Star properties']['star0']['row0']['Temp'] = 6440
    param_hd191089['#Star properties']['star0']['row0']['radius'] = 1.4
    param_hd191089['#Star properties']['star0']['row0']['M'] = 1.4
    param_hd191089['#Star properties']['star0']['row2']['fUV'] = 0.03


    ###############################################################################################
    ##################################### Section 2: Variables ####################################
    ############# parameters that vary, this section is used for MCMC modeling purposes ###########
    ###############################################################################################
    var_names_all = ['inc', 'PA', 'm_disk', 
                     'Rc', 'R_in', 'alpha_in', 'R_out', 'alpha_out', 'porosity', 
                     'fmass_0', 'fmass_1', 
                     'a_min', 'Q_powerlaw', 'scale height', 'grain type', 'Vmax']
    var_values_all = [59.5, 70.3, -7, 
                     43.6, 26, 5.9,  78, -5.1, 0.0,
                    0.00001, 0.00001,
                    -1.0, 3.5, 1.812, 'DHS', 0.0] # set Vmax default = 0 (Mie theory case)
    # Note: a_min and m_disk are in log scale, i.e., the actual mass is 10**(value).
    if var_names is None:
        var_names = var_names_all    #The above treatment allows for small paramter searching
    if var_values is None:    
        var_values = var_values_all
    if hash_address:
        hash_string = str(hash(np.array2string(np.array(var_values)))) + str(hash(np.array2string(np.random.rand(len(var_values))))) 
        # Hash the values to shrink the size, 2nd part is additional hash values to avoid same names
        
    # The MCFOST definition of inclination and position angle is not what we have been using.

    theta = dict(zip(var_names, var_values))
    theta_all = dict(zip(var_names_all, var_values_all))

    for var_name in var_names_all:
        if var_name == 'inc':
            if var_name in var_names:
                param_hd191089['#Maps']['row1']['imin'] = 180 - round(theta[var_name], 3)
                param_hd191089['#Maps']['row1']['imax'] = 180 - round(theta[var_name], 3)
            else:
                param_hd191089['#Maps']['row1']['imin'] = 180 - round(theta_all[var_name], 3)
                param_hd191089['#Maps']['row1']['imax'] = 180 - round(theta_all[var_name], 3)
            # Convert our definition to the MCFOST definition of inclination
        elif var_name == 'PA':
            if var_name in var_names:
                param_hd191089['#Maps']['row4']['disk PA'] = round(theta[var_name], 3) - 90
            else:
                param_hd191089['#Maps']['row4']['disk PA'] = round(theta_all[var_name], 3) - 90
            # Convert our definition to the MCFOST definition of position angle
        elif var_name == 'm_disk':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta[var_name], '.3e')
            else:
                param_hd191089['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Rc':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row3']['Rc'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Density structure']['zone0']['row3']['Rc'] = round(theta_all[var_name], 3)
        elif var_name == 'R_in':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row3']['Rin'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Density structure']['zone0']['row3']['Rin'] = round(theta_all[var_name], 3)
        elif var_name == 'alpha_in':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta_all[var_name], 3)
        elif var_name == 'R_out':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row3']['Rout'] = round(theta[var_name], 3)   
            else:
                param_hd191089['#Density structure']['zone0']['row3']['Rout'] = round(theta_all[var_name], 3)   
        elif var_name == 'alpha_out':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta_all[var_name], 3)
        elif var_name == 'porosity':
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['porosity'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['porosity'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['porosity'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['porosity'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['porosity'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['porosity'] = round(theta_all[var_name], 3)                  
        elif var_name == 'fmass_0':
            precision = 5
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['mass fraction'] = round(theta[var_name], precision)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['mass fraction'] = round(theta['fmass_1'], precision)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['mass fraction'] = round(1 - theta[var_name] - theta['fmass_1'], 3)
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['mass fraction'] = round(theta_all[var_name], precision)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['mass fraction'] = round(theta_all['fmass_1'], precision)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['mass fraction'] = round(1 - theta_all[var_name] - theta_all['fmass_1'], 3)
                
        elif var_name == 'a_min':
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row3']['amin'] = format(10**theta[var_name], '.3e')
                param_hd191089['#Grain properties']['zone0']['species1']['row3']['amin'] = format(10**theta[var_name], '.3e')
                param_hd191089['#Grain properties']['zone0']['species2']['row3']['amin'] = format(10**theta[var_name], '.3e')
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
                param_hd191089['#Grain properties']['zone0']['species1']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
                param_hd191089['#Grain properties']['zone0']['species2']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Q_powerlaw':
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row3']['aexp'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row3']['aexp'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row3']['aexp'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row3']['aexp'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row3']['aexp'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row3']['aexp'] = round(theta_all[var_name], 3)
        elif var_name == 'scale height':
            if var_name in var_names:
                param_hd191089['#Density structure']['zone0']['row2']['scale height'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Density structure']['zone0']['row2']['scale height'] = round(theta_all[var_name], 3)
        elif var_name == 'grain type':
            if not ('Vmax' in theta): # if 'Vmax' is not given in the input, then Mie theory is assumed
                theta_all[var_name] = 'Mie'
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['Grain type'] = theta[var_name]
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['Grain type'] = theta[var_name]
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['Grain type'] = theta[var_name]
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['Grain type'] = theta_all[var_name]
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['Grain type'] = theta_all[var_name]
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['Grain type'] = theta_all[var_name]
        elif var_name == 'Vmax':
            if var_name in var_names:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['Vmax'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['Vmax'] = round(theta[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['Vmax'] = round(theta[var_name], 3)
            else:
                param_hd191089['#Grain properties']['zone0']['species0']['row0']['Vmax'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species1']['row0']['Vmax'] = round(theta_all[var_name], 3)
                param_hd191089['#Grain properties']['zone0']['species2']['row0']['Vmax'] = round(theta_all[var_name], 3)
    ###############################################################################################
    ########################### Section 3: Parameter File for HD191089 ############################
    ######################### Instrument-specific adjusts for the system. #########################
    ###############################################################################################
    if STIS:
        param_hd191089_stis = copy.deepcopy(param_hd191089)
        stis_width = 315
        param_hd191089_stis['#Wavelength']['row3']['stokes parameters?'] = 'F'
        param_hd191089_stis['#Maps']['row0']['nx'] = stis_width
        param_hd191089_stis['#Maps']['row0']['ny'] = stis_width
        param_hd191089_stis['#Maps']['row0']['size'] = dist * stis_width * resolution_stis
    if NICMOS:
        param_hd191089_nicmos = copy.deepcopy(param_hd191089)
        nicmos_width = 139
        param_hd191089_nicmos['#Wavelength']['row3']['stokes parameters?'] = 'F'
        param_hd191089_nicmos['#Maps']['row0']['nx'] = nicmos_width
        param_hd191089_nicmos['#Maps']['row0']['ny'] = nicmos_width
        param_hd191089_nicmos['#Maps']['row0']['size'] = dist * nicmos_width * resolution_nicmos

    if GPI:
        param_hd191089_gpi = copy.deepcopy(param_hd191089)
        gpi_width = 281
        param_hd191089_gpi['#Wavelength']['row3']['stokes parameters?'] = 'T'
        param_hd191089_gpi['#Maps']['row0']['nx'] = gpi_width
        param_hd191089_gpi['#Maps']['row0']['ny'] = gpi_width
        param_hd191089_gpi['#Maps']['row0']['size'] = dist * gpi_width * resolution_gpi

    if paraPath is None:
        paraPath = './mcfost_models/'

    if os.path.exists(paraPath):
        foldernames = glob(paraPath + 'data_[0-9]*') # glob the images only, keep the SED profile
        for foldername in foldernames:
            shutil.rmtree(foldername)         # Delete the image folders if it exists to avoid duplicated computing
    else:
        os.mkdir(paraPath)              # Create the folder if it does not exist.
        
    currentDirectory = os.getcwd()          # Get current working directory, and jump back at the end
    
    if hash_address:
        paraPath_hash = paraPath[:-1] + hash_string + '/'

        if os.path.exists(paraPath_hash):
            shutil.rmtree(paraPath_hash)
            
        os.mkdir(paraPath_hash)
        
        os.chdir(paraPath_hash) 
    else:
        os.chdir(paraPath)                      # Now everthing is stored in the `paraPath` folder.
        
    flag_STIS = 0
    if STIS:
        mcfostParameterTemplate.display_file(param_hd191089_stis, 'hd191089_stis.para')
        flag_STIS = 1
    flag_NICMOS = 0
    if NICMOS:
        mcfostParameterTemplate.display_file(param_hd191089_nicmos, 'hd191089_nicmos.para')
        flag_NICMOS = 1
    flag_GPI = 0
    if GPI:
        mcfostParameterTemplate.display_file(param_hd191089_gpi, 'hd191089_gpi.para')
        flag_GPI = 1
    if paramfiles_only:
        print('Only paramter files are saved! MCFOST is not run!')
        os.chdir('../') 
        return 0
    ###############################################################################################
    ####################################### Section 4: Run ########################################
    ############################# Run the parameters and save the outputs. ########################
    ###############################################################################################
    flag_run = 0
    if calcSED:
        try:
            if os.path.exists('./data_th/'):
                shutil.rmtree('./data_th/')
            if STIS:
                instrument = 'stis'
            elif NICMOS:
                instrument = 'nicmos'
            elif GPI:
                instrument = 'gpi'
                
            flag_sed = subprocess.call('mcfost hd191089_' + instrument + '.para >> sedmcfostout.txt', shell = True)

            if flag_sed == 1:
                print('SED calculation is not performed, please check conflicting folder name.')
                flag_run += flag_sed
        except:
            flag_sed = 1
            print('SED calculation is not performed, something went wrong, but not the conflicting folders.')
            flag_run += flag_sed
            pass
    if calcImage:
        try:
            flags_image = [flag_STIS, flag_NICMOS, flag_GPI]
            if STIS:
                flags_image[0] = subprocess.call('mcfost hd191089_stis.para -img 0.58 -only_scatt >> imagemcfostout_STIS.txt', shell = True)
            if NICMOS:
                flags_image[1] = subprocess.call('mcfost hd191089_nicmos.para -img 1.12 -only_scatt >> imagemcfostout_NICMOS.txt', shell = True)
            if GPI:
                flags_image[2] = subprocess.call('mcfost hd191089_gpi.para -img 1.65 -only_scatt >> imagemcfostout_GPI_H.txt', shell = True)

            if sum(flags_image) > 0:
                print('Image calculation is not performed for all the three wavelengths, please check conflicting folder name(s) or non-existing SED file.')
                flag_run += sum(flags_image)
        except:
            flags_image = 1
            print('Image calculation is not performed for all the three wavelengths, something went wrong, but not the conflicting folders.')
            flag_run += flags_image
            pass
            
    os.chdir(currentDirectory)              # Go back to the top working directory

    if hash_address:
        return flag_run, hash_string
    
    return flag_run
    # return 0 if everything is performed.
    
def run_hr4796aH2spf(var_names = None, var_values = None, paraPath = None, calcSED = False, calcImage = False, calcSPF = True, hash_address = True, paramfiles_only = False, Fe_composition = True):
    """This code generates and saves the MCFOST SPF(s) to `paraPath` with given input parameters. 
    The MCFOST parameters are modified from the template generated by mcfostParameterTemplate().
    
    There are 3 major sections:
    1. Fixed Parameters: parameters fixed specific for the HR 4796 A disk system.
    2. Variables: parameters that vary, this section is used for MCMC modeling purposes.
    3. Parameter File for HR 4796 A:  we have the SPF for the HR 4796 A system with 1 instrument (VLT/SPHERE H2), the parameter structure generated from the above two sections is only for it (1.593 micrometer, SPHERE H2).
       The directly and indirectly modified parameters are: field of view, pixel size, whether to generate Stokes parameters, etc.
    
    The parameter files are then run to generate for the instrument, and saved to hard drive.
    
    Inputs:
    1. The `var_names` are the variable parameters for Section 2, and they are MANUALLY mapped to the corresponding parameters in
    the template generated by mcfostParameterTemplate(). This step is performed to create a quick link to the template variables.
    2. The `var_values` contains the list corresponding values for `var_names`. The default value is in the folder where you run the code.
    3. `paraPath` contains the path where you'd like to save the parameter files. If `None`, it will be saved in currrent folder.
    4. `calcSED`: whether to calculate the spectral energy distribution (SED) for such system.
        Note: SED calculation takes the majority of time in this code. To save time (and if you do not focus on the SED of the system),
        you can turn this to `False` when calculating the images.
    5. `calcImage`: whether to calculate the images for such system.
        Note: before `calcImage`, you have to set `calcSED = True` for at least ONCE. Once you have the SED, you can vary the input parameters
        to generate new images.
    6. `calcSPF`: whether to calculate the phase function for this system.
    7. `hash_address`: whether to hash the path/address to enable parallel evaluation of different parameters by saving at different addresses.
    8. `paramfiles_only`: whether to only generate the parameter files.
    9. `Fe_composition`: wheter to use Fe as a composition, if True, the compositions will be amorphous Silicates, amorphous Carbon, and Fe-Posch (default is False: Fe-Posch will be H2O Ice).
    """
    
    param_hr4796aH2spf = mcfostParameterTemplate.generateMcfostTemplate(1, [1], 1, 3)

    resolution_stis = 0.05078
    resolution_gpi = 14.166e-3
    resolution_nicmos = 0.07565
    resolution_sphere = 12.25e-3

    ###############################################################################################
    ################################# Section 1: Fixed Parameters #################################
    ################### parameters fixed specific for the HD 191089 disk system.###################
    ###############################################################################################

    dist = 71.9
    param_hr4796aH2spf['#Number of photon packages']['row0']['nbr_photons_eq_th'] = 1.28e6
    param_hr4796aH2spf['#Number of photon packages']['row1']['nbr_photons_lambda'] = 5e3
    param_hr4796aH2spf['#Wavelength']['row0']['n_lambda'] = 50
    param_hr4796aH2spf['#Grid geometry and size']['row1']['n_rad'] = 100
    param_hr4796aH2spf['#Grid geometry and size']['row1']['nz'] = 70
    param_hr4796aH2spf['#Grid geometry and size']['row1']['n_rad_in'] = 20
    param_hr4796aH2spf['#Maps']['row3']['distance'] = dist


    param_hr4796aH2spf['#Density structure']['zone0']['row1']['gas-to-dust mass ratio'] = 1e-1
    param_hr4796aH2spf['#Density structure']['zone0']['row2']['reference radius'] = 76.7
    param_hr4796aH2spf['#Density structure']['zone0']['row2']['scale height'] = 3.07
    param_hr4796aH2spf['#Density structure']['zone0']['row2']['vertical profile exponent'] = 2

    param_hr4796aH2spf['#Grain properties']['row0']['Grain type'] = 'DHS'
    param_hr4796aH2spf['#Grain properties']['row5']['amax'] = 1e3
    param_hr4796aH2spf['#Grain properties']['row5']['nbr_grains'] = 800
    

    param_hr4796aH2spf['#Grain properties']['row1']['Optical indices file'] = 'MgSiO3.dat'
    param_hr4796aH2spf['#Grain properties']['row2']['Optical indices file'] = 'ac_opct.dat'    #'lgsi_opct.dat'
    if Fe_composition:
        param_hr4796aH2spf['#Grain properties']['row3']['Optical indices file'] = 'Fe-Posch.dat'
    else:
        param_hr4796aH2spf['#Grain properties']['row3']['Optical indices file'] = 'ice_opct.dat'   #'Fe-Posch.dat'

    param_hr4796aH2spf['#Star properties']['star0']['row0']['Temp'] = 9250
    param_hr4796aH2spf['#Star properties']['star0']['row0']['radius'] = 1.85
    param_hr4796aH2spf['#Star properties']['star0']['row0']['M'] = 1.0
    param_hr4796aH2spf['#Star properties']['star0']['row1'] = 'Kurucz9250-4.5.fits.gz'
    param_hr4796aH2spf['#Star properties']['star0']['row2']['fUV'] = 0.00
    param_hr4796aH2spf['#Star properties']['star0']['row2']['slope_fUV'] = 0.00



    ###############################################################################################
    ##################################### Section 2: Variables ####################################
    ############# parameters that vary, this section is used for MCMC modeling purposes ###########
    ###############################################################################################
    var_names_all = ['inc', 'PA', 'm_disk', 
                     'Rc', 'R_in', 'alpha_in', 'R_out', 'alpha_out', 'porosity', 
                     'fmass_0', 'fmass_1', 
                     'a_min', 'Q_powerlaw', 'scale height', 'grain type', 'Vmax']
    var_values_all = [76.45, 27.1, -10, 
                     76.7, 72.2, 5.25,  91.7, -6.8, 0.2,
                    0.6, 0.2,
                    1.0, 3.5, 3.07, 'DHS', 0.6] # set Vmax default = 0 (Mie theory case)
                    # The alpha_in and alpha_out are from https://arxiv.org/abs/1712.08599 value.
    # Note: a_min and m_disk are in log scale, i.e., the actual mass is 10**(value).
    if var_names is None:
        var_names = var_names_all    #The above treatment allows for small paramter searching
    if var_values is None:    
        var_values = var_values_all
    if hash_address:
        hash_string = str(hash(np.array2string(np.array(var_values)))) + str(hash(np.array2string(np.random.rand(len(var_values))))) 
        # Hash the values to shrink the size, 2nd part is additional hash values to avoid same names
        
    # The MCFOST definition of inclination and position angle is not what we have been using.

    theta = dict(zip(var_names, var_values))
    theta_all = dict(zip(var_names_all, var_values_all))

    for var_name in var_names_all:
        if var_name == 'inc':
            if var_name in var_names:
                param_hr4796aH2spf['#Maps']['row1']['imin'] = 180 - round(theta[var_name], 3)
                param_hr4796aH2spf['#Maps']['row1']['imax'] = 180 - round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Maps']['row1']['imin'] = 180 - round(theta_all[var_name], 3)
                param_hr4796aH2spf['#Maps']['row1']['imax'] = 180 - round(theta_all[var_name], 3)
            # Convert our definition to the MCFOST definition of inclination
        elif var_name == 'PA':
            if var_name in var_names:
                param_hr4796aH2spf['#Maps']['row4']['disk PA'] = round(theta[var_name], 3) - 90
            else:
                param_hr4796aH2spf['#Maps']['row4']['disk PA'] = round(theta_all[var_name], 3) - 90
            # Convert our definition to the MCFOST definition of position angle
        elif var_name == 'm_disk':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta[var_name], '.3e')
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Rc':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rc'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rc'] = round(theta_all[var_name], 3)
        elif var_name == 'R_in':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rin'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rin'] = round(theta_all[var_name], 3)
        elif var_name == 'alpha_in':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta_all[var_name], 3)
        elif var_name == 'R_out':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rout'] = round(theta[var_name], 3)   
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row3']['Rout'] = round(theta_all[var_name], 3)   
        elif var_name == 'alpha_out':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta_all[var_name], 3)
        elif var_name == 'porosity':
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row0']['porosity'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Grain properties']['row0']['porosity'] = round(theta_all[var_name], 3)                
        elif var_name == 'fmass_0':
            precision = 5
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row1']['volume fraction']= round(theta[var_name], precision)
                param_hr4796aH2spf['#Grain properties']['row2']['volume fraction'] = round(theta['fmass_1'], precision)
                param_hr4796aH2spf['#Grain properties']['row3']['volume fraction']= round(1 - theta[var_name] - theta['fmass_1'], 3)
            else:
                param_hr4796aH2spf['#Grain properties']['row1']['volume fraction'] = round(theta_all[var_name], precision)
                param_hr4796aH2spf['#Grain properties']['row2']['Ovolume fraction'] = round(theta_all['fmass_1'], precision)
                param_hr4796aH2spf['#Grain properties']['row3']['volume fraction'] = round(1 - theta_all[var_name] - theta_all['fmass_1'], 3)
                
        elif var_name == 'a_min':
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row5']['amin'] = format(10**theta[var_name], '.3e')
            else:
                param_hr4796aH2spf['#Grain properties']['row5']['amin'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Q_powerlaw':
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row5']['aexp'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Grain properties']['row5']['aexp'] = round(theta_all[var_name], 3)
        elif var_name == 'scale height':
            if var_name in var_names:
                param_hr4796aH2spf['#Density structure']['zone0']['row2']['scale height'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Density structure']['zone0']['row2']['scale height'] = round(theta_all[var_name], 3)
        elif var_name == 'grain type':
            if not ('Vmax' in theta): # if 'Vmax' is not given in the input, then Mie theory is assumed
                theta_all[var_name] = 'Mie'
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row0']['Grain type'] = theta[var_name]
            else:
                param_hr4796aH2spf['#Grain properties']['row0']['Grain type'] = theta_all[var_name]
        elif var_name == 'Vmax':
            if var_name in var_names:
                param_hr4796aH2spf['#Grain properties']['row0']['Vmax'] = round(theta[var_name], 3)
            else:
                param_hr4796aH2spf['#Grain properties']['row0']['Vmax'] = round(theta_all[var_name], 3)
    ###############################################################################################
    ########################### Section 3: Parameter File for HD191089 ############################
    ######################### Instrument-specific adjusts for the system. #########################
    ###############################################################################################

    param_hr4796aH2spf = copy.deepcopy(param_hr4796aH2spf)
    sphere_width = 201
    param_hr4796aH2spf['#Wavelength']['row3']['stokes parameters?'] = 'F'
    param_hr4796aH2spf['#Maps']['row0']['nx'] = sphere_width
    param_hr4796aH2spf['#Maps']['row0']['ny'] = sphere_width
    param_hr4796aH2spf['#Maps']['row0']['size'] = np.round(dist * sphere_width * resolution_sphere, 3)

    if paraPath is None:
        paraPath = './mcfost_models/'

    if os.path.exists(paraPath):
        foldernames = glob(paraPath + 'data_[0-9]*') # glob the images only, keep the SED profile
        for foldername in foldernames:
            shutil.rmtree(foldername)         # Delete the image folders if it exists to avoid duplicated computing
    else:
        os.mkdir(paraPath)              # Create the folder if it does not exist.
        
    currentDirectory = os.getcwd()          # Get current working directory, and jump back at the end
    
    if hash_address:
        paraPath_hash = paraPath[:-1] + hash_string + '/'

        if os.path.exists(paraPath_hash):
            shutil.rmtree(paraPath_hash)
            
        os.mkdir(paraPath_hash)
        
        os.chdir(paraPath_hash) 
    else:
        os.chdir(paraPath)                      # Now everthing is stored in the `paraPath` folder.
        
    flag_SPHERE = 0

    mcfostParameterTemplate.display_file(param_hr4796aH2spf, 'hr4796a_sphere.para')
    flag_SPHERE = 1

    if paramfiles_only:
        print('Only paramter files are saved! MCFOST is not run!')
        os.chdir('../') 
        return 0
    ###############################################################################################
    ####################################### Section 4: Run ########################################
    ############################# Run the parameters and save the outputs. ########################
    ###############################################################################################
    flag_run = 0
    if calcSED:
        try:
            if os.path.exists('./data_th/'):
                shutil.rmtree('./data_th/')
                
            flag_sed = subprocess.call('mcfost hr4796a_sphere.para >> sedmcfostout.txt', shell = True)

            if flag_sed == 1:
                print('SED calculation is not performed, please check conflicting folder name.')
                flag_run += flag_sed
        except:
            flag_sed = 1
            print('SED calculation is not performed, something went wrong, but not the conflicting folders.')
            flag_run += flag_sed
            pass
    if calcImage:
        try:
            flag_image = subprocess.call('mcfost hr4796a_sphere.para -img 1.593 -only_scatt >> imagemcfostout.txt', shell = True)

            if flag_image > 0:
                print('Image calculation is not performed, please check conflicting folder name(s) or non-existing SED file.')
                flag_run += flag_image
        except:
            flag_image = 1
            print('Image calculation is not performed, something went wrong, but not the conflicting folders.')
            flag_run += flag_image
            pass
    if calcSPF:
        try:
            flag_spf = subprocess.call('mcfost hr4796a_sphere.para -dust_prop -op 1.593 >> dustpropmcfostout.txt', shell = True)
            flag_spf = 0 #   '1 is probably a wrong exit code in MCFOST. The files are there.'

            if flag_spf > 0:
                print('Dust property calculation is not performed, please check conflicting folder name(s).')
                flag_run += flag_spf
        except:
            flag_spf = 1
            print('Dust property calculation is not performe, something went wrong, but not the conflicting folders.')
            flag_run += flag_spf
            pass
            
    os.chdir(currentDirectory)              # Go back to the top working directory

    if hash_address:
        return flag_run, hash_string
    
    return flag_run
    # return 0 if everything is performed.

def run_pds70keck(var_names = None, var_values = None, paraPath = None, calcSED = False, calcImage = True, hash_address = True, Keck38 = True, paramfiles_only = False):
    """This code generates and saves the MCFOST disk(s) to `paraPath` with given input parameters. 
    The MCFOST parameters are modified from the template generated by mcfostParameterTemplate().
    
    There are 3 major sections:
    1. Fixed Parameters: parameters fixed specific for the PDS70 disk system.
    2. Variables: parameters that vary, this section is used for MCMC modeling purposes.
    3. Parameter File for PDS70: Keck Lp at 3.8 micron.
       The directly and indirectly modified parameters are: field of view, pixel size, whether to generate Stokes parameters, etc.
    
    The parameter files are then run to generate for the three instruments, and saved to hard drive.
    
    Inputs:
    1. The `var_names` are the variable parameters for Section 2, and they are MANUALLY mapped to the corresponding parameters in
    the template generated by mcfostParameterTemplate(). This step is performed to create a quick link to the template variables.
    2. The `var_values` contains the list corresponding values for `var_names`. The default value is in the folder where you run the code.
    3. `paraPath` contains the path where you'd like to save the parameter files. If `None`, it will be saved in currrent folder.
    4. `calcSED`: whether to calculate the spectral energy distribution (SED) for such system.
        Note: SED calculation takes the majority of time in this code. To save time (and if you do not focus on the SED of the system),
        you can turn this to `False` when calculating the images.
    5. `calcImage`: whether to calculate the images for such system.
        Note: before `calcImage`, you DO NOT have to set `calcSED = True`. The scattered light image can be directly generated using MCFOST.
    6. `hash_address`: whether to hash the path/address to enable parallel evaluation of different parameters by saving at different addresses.
    7. `Keck38`: whether to generate the Keck image at 3.8 micron
    8. `paramfiles_only`: whether to only generate the parameter files.
    """
    
    param_PDS70 = mcfostParameterTemplate.generateMcfostTemplate(1, [3], 1)

    resolution_kecknirc2 = 0.009942

    ###############################################################################################
    ################################# Section 1: Fixed Parameters #################################
    ################### parameters fixed specific for the PDS70 disk system.###################
    ###############################################################################################

    dist = 113.43
    param_PDS70['#Grid geometry and size']['row1']['n_rad'] = 100
    param_PDS70['#Maps']['row3']['distance'] = dist


    param_PDS70['#Density structure']['zone0']['row1']['gas-to-dust mass ratio'] = 0
    param_PDS70['#Density structure']['zone0']['row2']['reference radius'] = 100
    param_PDS70['#Density structure']['zone0']['row2']['scale height'] = 2
    param_PDS70['#Density structure']['zone0']['row2']['vertical profile exponent'] = 2

    param_PDS70['#Grain properties']['zone0']['species0']['row0']['Grain type'] = 'Mie'
    param_PDS70['#Grain properties']['zone0']['species1']['row0']['Grain type'] = 'Mie'
    param_PDS70['#Grain properties']['zone0']['species2']['row0']['Grain type'] = 'Mie'

    param_PDS70['#Grain properties']['zone0']['species0']['row3']['amax'] = 1e3
    param_PDS70['#Grain properties']['zone0']['species1']['row3']['amax'] = 1e3
    param_PDS70['#Grain properties']['zone0']['species2']['row3']['amax'] = 1e3

    param_PDS70['#Grain properties']['zone0']['species0']['row1']['Optical indices file'] = 'dlsi_opct.dat'  #'MgSiO3.dat'
    param_PDS70['#Grain properties']['zone0']['species1']['row1']['Optical indices file'] = 'ac_opct.dat'    #'lgsi_opct.dat'
    param_PDS70['#Grain properties']['zone0']['species2']['row1']['Optical indices file'] = 'ice_opct.dat'
    
    param_PDS70['#Star properties']['star0']['row0']['Temp'] = 4226
    param_PDS70['#Star properties']['star0']['row0']['radius'] = 1.06
    param_PDS70['#Star properties']['star0']['row0']['M'] = 0.82
    param_PDS70['#Star properties']['star0']['row0']['is a blackbody?'] = 'T'
    param_PDS70['#Star properties']['star0']['row1'] = 'lte4000-3.5.NextGen.fits.gz'
    param_PDS70['#Star properties']['star0']['row2']['fUV'] = 0.1



    ###############################################################################################
    ##################################### Section 2: Variables ####################################
    ############# parameters that vary, this section is used for MCMC modeling purposes ###########
    ###############################################################################################
    var_names_all = ['inc', 'PA', 'm_disk', 
                     'Rc', 'R_in', 'alpha_in', 'R_out', 'alpha_out', 'porosity', 
                     'fmass_0', 'fmass_1', 
                     'a_min', 'Q_powerlaw', 'scale height', 'grain type', 'flaring exp']
    var_values_all = [49.7, -21.4, -7, 
                     67.8, 60, 2,  76, -2, 0.0, 
                     0.0001, 0.0001,
                    -2.0, 3.5, 1.812, 'Mie', 1.0] # set Vmax default = 0 (Mie theory case)
    # Note: a_min and m_disk are in log scale, i.e., the actual mass is 10**(value).
    if var_names is None:
        var_names = var_names_all    #The above treatment allows for small paramter searching
    if var_values is None:    
        var_values = var_values_all
    if hash_address:
        hash_string = str(hash(np.array2string(np.array(var_values)))) + str(hash(np.array2string(np.random.rand(len(var_values))))) 
        # Hash the values to shrink the size, 2nd part is additional hash values to avoid same names
        
    # The MCFOST definition of inclination and position angle is not what we have been using.

    theta = dict(zip(var_names, var_values))
    theta_all = dict(zip(var_names_all, var_values_all))

    for var_name in var_names_all:
        if var_name == 'inc':
            if var_name in var_names:
                param_PDS70['#Maps']['row1']['imin'] = 180 - round(theta[var_name], 3)
                param_PDS70['#Maps']['row1']['imax'] = 180 - round(theta[var_name], 3)
            else:
                param_PDS70['#Maps']['row1']['imin'] = 180 - round(theta_all[var_name], 3)
                param_PDS70['#Maps']['row1']['imax'] = 180 - round(theta_all[var_name], 3)
            # Convert our definition to the MCFOST definition of inclination
        elif var_name == 'PA':
            if var_name in var_names:
                param_PDS70['#Maps']['row4']['disk PA'] = round(theta[var_name], 3) - 90
            else:
                param_PDS70['#Maps']['row4']['disk PA'] = round(theta_all[var_name], 3) - 90
            # Convert our definition to the MCFOST definition of position angle
        elif var_name == 'm_disk':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta[var_name], '.3e')
            else:
                param_PDS70['#Density structure']['zone0']['row1']['dust mass'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Rc':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row3']['Rc'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row3']['Rc'] = round(theta_all[var_name], 3)
        elif var_name == 'R_in':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row3']['Rin'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row3']['Rin'] = round(theta_all[var_name], 3)
        elif var_name == 'alpha_in':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row5']['surface density exponent/alpha_in'] = round(theta_all[var_name], 3)
        elif var_name == 'R_out':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row3']['Rout'] = round(theta[var_name], 3)   
            else:
                param_PDS70['#Density structure']['zone0']['row3']['Rout'] = round(theta_all[var_name], 3)   
        elif var_name == 'alpha_out':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row5']['-gamma_exp/alpha_out'] = round(theta_all[var_name], 3)
        elif var_name == 'flaring exp':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row4']['flaring exponent'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row4']['flaring exponent'] = round(theta_all[var_name], 3)
        elif var_name == 'porosity':
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['porosity'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['porosity'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['porosity'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['porosity'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['porosity'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['porosity'] = round(theta_all[var_name], 3)  
        elif var_name == 'fmass_0':
            precision = 5
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['mass fraction'] = round(theta[var_name], precision)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['mass fraction'] = round(theta['fmass_1'], precision)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['mass fraction'] = round(1 - theta[var_name] - theta['fmass_1'], 3)
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['mass fraction'] = round(theta_all[var_name], precision)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['mass fraction'] = round(theta_all['fmass_1'], precision)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['mass fraction'] = round(1 - theta_all[var_name] - theta_all['fmass_1'], 3)           
        elif var_name == 'a_min':
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row3']['amin'] = format(10**theta[var_name], '.3e')
                param_PDS70['#Grain properties']['zone0']['species1']['row3']['amin'] = format(10**theta[var_name], '.3e')
                param_PDS70['#Grain properties']['zone0']['species2']['row3']['amin'] = format(10**theta[var_name], '.3e')
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
                param_PDS70['#Grain properties']['zone0']['species1']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
                param_PDS70['#Grain properties']['zone0']['species2']['row3']['amin'] = format(10**theta_all[var_name], '.3e')
        elif var_name == 'Q_powerlaw':
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row3']['aexp'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row3']['aexp'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row3']['aexp'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row3']['aexp'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row3']['aexp'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row3']['aexp'] = round(theta_all[var_name], 3)
        elif var_name == 'scale height':
            if var_name in var_names:
                param_PDS70['#Density structure']['zone0']['row2']['scale height'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Density structure']['zone0']['row2']['scale height'] = round(theta_all[var_name], 3)
        elif var_name == 'grain type':
            if not ('Vmax' in theta): # if 'Vmax' is not given in the input, then Mie theory is assumed
                theta_all[var_name] = 'Mie'
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['Grain type'] = theta[var_name]
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['Grain type'] = theta[var_name]
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['Grain type'] = theta[var_name]
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['Grain type'] = theta_all[var_name]
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['Grain type'] = theta_all[var_name]
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['Grain type'] = theta_all[var_name]
        elif var_name == 'Vmax':
            if var_name in var_names:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['Vmax'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['Vmax'] = round(theta[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['Vmax'] = round(theta[var_name], 3)
            else:
                param_PDS70['#Grain properties']['zone0']['species0']['row0']['Vmax'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species1']['row0']['Vmax'] = round(theta_all[var_name], 3)
                param_PDS70['#Grain properties']['zone0']['species2']['row0']['Vmax'] = round(theta_all[var_name], 3)

    ###############################################################################################
    ########################### Section 3: Parameter File for PDS70 ############################
    ######################### Instrument-specific adjusts for the system. #########################
    ###############################################################################################
    nirc2_width = 161
    param_PDS70['#Wavelength']['row3']['stokes parameters?'] = 'F'
    param_PDS70['#Maps']['row0']['nx'] = nirc2_width
    param_PDS70['#Maps']['row0']['ny'] = nirc2_width
    param_PDS70['#Maps']['row0']['size'] = dist * nirc2_width * resolution_kecknirc2

    if paraPath is None:
        paraPath = './mcfost_models/'

    if os.path.exists(paraPath):
        foldernames = glob(paraPath + 'data_[0-9]*') # glob the images only, keep the SED profile
        for foldername in foldernames:
            shutil.rmtree(foldername)         # Delete the image folders if it exists to avoid duplicated computing
    else:
        os.mkdir(paraPath)              # Create the folder if it does not exist.
        
    currentDirectory = os.getcwd()          # Get current working directory, and jump back at the end
    
    if hash_address:
        paraPath_hash = paraPath[:-1] + hash_string + '/'

        if os.path.exists(paraPath_hash):
            shutil.rmtree(paraPath_hash)
            
        os.mkdir(paraPath_hash)
        
        os.chdir(paraPath_hash) 
    else:
        os.chdir(paraPath)                      # Now everthing is stored in the `paraPath` folder.
        
    mcfostParameterTemplate.display_file(param_PDS70, 'PDS70_nirc2lp.para')

    
    if paramfiles_only:
        print('Only paramter files are saved! MCFOST is not run!')
        os.chdir('../') 
        return 0
    ###############################################################################################
    ####################################### Section 4: Run ########################################
    ############################# Run the parameters and save the outputs. ########################
    ###############################################################################################
    flag_run = 0
    if calcSED:
        try:
            if os.path.exists('./data_th/'):
                shutil.rmtree('./data_th/')
                
            flag_sed = subprocess.call('mcfost PDS70_nirc2lp.para >> sedmcfostout.txt', shell = True)

            if flag_sed == 1:
                print('SED calculation is not performed, please check conflicting folder name.')
                flag_run += flag_sed
        except:
            flag_sed = 1
            print('SED calculation is not performed, something went wrong, but not the conflicting folders.')
            flag_run += flag_sed
            pass
    if calcImage:
        try:
            flag_image = subprocess.call('mcfost PDS70_nirc2lp.para -img 3.8 -only_scatt >> imagemcfostout_KeckNIRC2Lp.txt', shell = True)

            if flag_image > 0:
                print('Image calculation is not performed, please check conflicting folder name(s) or non-existing SED file.')
                flag_run += sum(flags_image)
        except:
            flag_image = 1
            print('Image calculation is not performed, something went wrong, but not the conflicting folders.')
            flag_run += flag_image
            pass
            
    os.chdir(currentDirectory)              # Go back to the top working directory

    if hash_address:
        return flag_run, hash_string
    
    return flag_run
#     return 0 if everything is performed.